// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=handler_mock_test.go -package=poke
//

// Package poke is a generated GoMock package.
package poke

import (
	context "context"
	reflect "reflect"

	poke "github.com/Fairuzzzzz/pokedex-api/internal/models/poke"
	gomock "go.uber.org/mock/gomock"
)

// Mockservice is a mock of service interface.
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
	isgomock struct{}
}

// MockserviceMockRecorder is the mock recorder for Mockservice.
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance.
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// PokemonSearch mocks base method.
func (m *Mockservice) PokemonSearch(ctx context.Context, name string) (*poke.SearchPokemonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PokemonSearch", ctx, name)
	ret0, _ := ret[0].(*poke.SearchPokemonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PokemonSearch indicates an expected call of PokemonSearch.
func (mr *MockserviceMockRecorder) PokemonSearch(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PokemonSearch", reflect.TypeOf((*Mockservice)(nil).PokemonSearch), ctx, name)
}
