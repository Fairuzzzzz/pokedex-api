// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=handler_mock_test.go -package=pokemoninteam
//

// Package pokemoninteam is a generated GoMock package.
package pokemoninteam

import (
	context "context"
	reflect "reflect"

	pokemoninteam "github.com/Fairuzzzzz/pokedex-api/internal/models/pokemoninteam"
	gomock "go.uber.org/mock/gomock"
)

// Mockservice is a mock of service interface.
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
	isgomock struct{}
}

// MockserviceMockRecorder is the mock recorder for Mockservice.
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance.
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// AddPokemonToTeam mocks base method.
func (m *Mockservice) AddPokemonToTeam(ctx context.Context, userID uint, request pokemoninteam.PokemonRequestWithName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPokemonToTeam", ctx, userID, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPokemonToTeam indicates an expected call of AddPokemonToTeam.
func (mr *MockserviceMockRecorder) AddPokemonToTeam(ctx, userID, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPokemonToTeam", reflect.TypeOf((*Mockservice)(nil).AddPokemonToTeam), ctx, userID, request)
}

// DeletePokemon mocks base method.
func (m *Mockservice) DeletePokemon(ctx context.Context, request pokemoninteam.PokemonRequestWithID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePokemon", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePokemon indicates an expected call of DeletePokemon.
func (mr *MockserviceMockRecorder) DeletePokemon(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePokemon", reflect.TypeOf((*Mockservice)(nil).DeletePokemon), ctx, request)
}

// ListPokemon mocks base method.
func (m *Mockservice) ListPokemon(ctx context.Context, teamID uint) ([]pokemoninteam.PokemonTeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPokemon", ctx, teamID)
	ret0, _ := ret[0].([]pokemoninteam.PokemonTeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPokemon indicates an expected call of ListPokemon.
func (mr *MockserviceMockRecorder) ListPokemon(ctx, teamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPokemon", reflect.TypeOf((*Mockservice)(nil).ListPokemon), ctx, teamID)
}
